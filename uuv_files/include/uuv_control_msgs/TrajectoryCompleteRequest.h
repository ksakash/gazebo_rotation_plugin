// Generated by gencpp from file uuv_control_msgs/TrajectoryCompleteRequest.msg
// DO NOT EDIT!


#ifndef UUV_CONTROL_MSGS_MESSAGE_TRAJECTORYCOMPLETEREQUEST_H
#define UUV_CONTROL_MSGS_MESSAGE_TRAJECTORYCOMPLETEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_control_msgs
{
template <class ContainerAllocator>
struct TrajectoryCompleteRequest_
{
  typedef TrajectoryCompleteRequest_<ContainerAllocator> Type;

  TrajectoryCompleteRequest_()
    : time_out(0.0)  {
    }
  TrajectoryCompleteRequest_(const ContainerAllocator& _alloc)
    : time_out(0.0)  {
  (void)_alloc;
    }



   typedef double _time_out_type;
  _time_out_type time_out;





  typedef boost::shared_ptr< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryCompleteRequest_

typedef ::uuv_control_msgs::TrajectoryCompleteRequest_<std::allocator<void> > TrajectoryCompleteRequest;

typedef boost::shared_ptr< ::uuv_control_msgs::TrajectoryCompleteRequest > TrajectoryCompleteRequestPtr;
typedef boost::shared_ptr< ::uuv_control_msgs::TrajectoryCompleteRequest const> TrajectoryCompleteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uuv_control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/home/ksakash/ros_catkin_ws/install_isolated/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/home/ksakash/ros_catkin_ws/install_isolated/share/std_msgs/cmake/../msg'], 'uuv_control_msgs': ['/home/ksakash/uuv_ws/src/uuv_simulator/uuv_control/uuv_control_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c54f013c0155ba411cc664492d85ea3d";
  }

  static const char* value(const ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc54f013c0155ba41ULL;
  static const uint64_t static_value2 = 0x1cc664492d85ea3dULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_control_msgs/TrajectoryCompleteRequest";
  }

  static const char* value(const ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time_out\n"
;
  }

  static const char* value(const ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_out);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryCompleteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_control_msgs::TrajectoryCompleteRequest_<ContainerAllocator>& v)
  {
    s << indent << "time_out: ";
    Printer<double>::stream(s, indent + "  ", v.time_out);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_CONTROL_MSGS_MESSAGE_TRAJECTORYCOMPLETEREQUEST_H
